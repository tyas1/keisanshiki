/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. ExprParser.jj */
/*@egen*/// ----- \u30aa\u30d7\u30b7\u30e7\u30f3\u5b9a\u7fa9 -----
options
{
  STATIC = false;
               
                 
                                          
  UNICODE_INPUT = true;
}

// ----- \u30d1\u30fc\u30b5\u30fc\u30af\u30e9\u30b9\u306e\u5b9a\u7fa9 -----
PARSER_BEGIN(ExprParser)
package codezine.expr.parser;

public class ExprParser/*@bgen(jjtree)*/implements ExprParserTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected JJTExprParserState jjtree = new JJTExprParserState();

/*@egen*/
}

PARSER_END(ExprParser)

// ========== \u30c8\u30fc\u30af\u30f3\u306e\u5b9a\u7fa9 ==========

// ----- \u30db\u30ef\u30a4\u30c8\u30b9\u30da\u30fc\u30b9 -----
SKIP :
{
	  " "
	| "\t"
	| "\n"
	| "\r"
	| "\f"
}

// ----- \u30b3\u30e1\u30f3\u30c8 -----
MORE :
{
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "//" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")?>
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

TOKEN :
{
	  < PLUS : "+" >
	| < MINUS : "-" >
	| < MUL : "*" >
	| < DIV : "/" >
	| < LPAREN : "(" >
	| < RPAREN : ")" >
//	| < INTEGER : ([ "0"-"9" ])+ >
//	|  < STRING_LITERAL:
//      "\""
//      (   (~["\"","\\","\n","\r"])
//        | ("\\"
//            ( ["n","t","b","r","f","\\","'","\""]
//            | ["0"-"7"] ( ["0"-"7"] )?
//            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
//            )
//          )
//      )*
//      "\""
//  	>
}

//\u6587\u5b57\u5217
TOKEN :
{
  < STR_START : "\"" > : IN_STR
}

< IN_STR >
MORE :
{
  < ~[ "\"", "\\", "\n", "\r", "\t" ] >
| < "\\\""
  | "\\\\" >
  {
    image.deleteCharAt(image.length() - 2);
  }
| < "\\n"
  | "\\r" >
  {
    image.delete(image.length() - 2, image.length());
    image.append("\n");
  }
| < "\\t" >
  {
    image.delete(image.length() - 2, image.length());
    image.append("\t");
  }
}

< IN_STR >
TOKEN :
{
  < STR : "\"" >
  {
    image.deleteCharAt(image.length() - 1);
    matchedToken.image = image.toString();
  }
  : DEFAULT
}

// ========== \u6587\u6cd5\u306e\u5b9a\u7fa9 ==========
ASTStart Start() :
{/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  AddExpr()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
      return jjtn000;
    }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void AddExpr()       :
{}
{
  MulExpr()
  (
    < PLUS >/*@bgen(jjtree) #Add( 2) */
             {
               ASTAdd jjtn001 = new ASTAdd(JJTADD);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
             }
             try {
/*@egen*/ MulExpr()/*@bgen(jjtree)*/
             } catch (Throwable jjte001) {
               if (jjtc001) {
                 jjtree.clearNodeScope(jjtn001);
                 jjtc001 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte001 instanceof RuntimeException) {
                 throw (RuntimeException)jjte001;
               }
               if (jjte001 instanceof ParseException) {
                 throw (ParseException)jjte001;
               }
               throw (Error)jjte001;
             } finally {
               if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001,  2);
               }
             }
/*@egen*/        
| < MINUS >/*@bgen(jjtree) #Sub( 2) */
            {
              ASTSub jjtn002 = new ASTSub(JJTSUB);
              boolean jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
            }
            try {
/*@egen*/ MulExpr()/*@bgen(jjtree)*/
            } catch (Throwable jjte002) {
              if (jjtc002) {
                jjtree.clearNodeScope(jjtn002);
                jjtc002 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte002 instanceof RuntimeException) {
                throw (RuntimeException)jjte002;
              }
              if (jjte002 instanceof ParseException) {
                throw (ParseException)jjte002;
              }
              throw (Error)jjte002;
            } finally {
              if (jjtc002) {
                jjtree.closeNodeScope(jjtn002,  2);
              }
            }
/*@egen*/        
)*
}

void MulExpr()       :
{}
{
  Value()
  (
    < MUL >/*@bgen(jjtree) #Multi( 2) */
            {
              ASTMulti jjtn001 = new ASTMulti(JJTMULTI);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
            }
            try {
/*@egen*/ Value()/*@bgen(jjtree)*/
            } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                throw (RuntimeException)jjte001;
              }
              if (jjte001 instanceof ParseException) {
                throw (ParseException)jjte001;
              }
              throw (Error)jjte001;
            } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001,  2);
              }
            }
/*@egen*/          
| < DIV >/*@bgen(jjtree) #Division( 2) */
          {
            ASTDivision jjtn002 = new ASTDivision(JJTDIVISION);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
          }
          try {
/*@egen*/ Value()/*@bgen(jjtree)*/
          } catch (Throwable jjte002) {
            if (jjtc002) {
              jjtree.clearNodeScope(jjtn002);
              jjtc002 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte002 instanceof RuntimeException) {
              throw (RuntimeException)jjte002;
            }
            if (jjte002 instanceof ParseException) {
              throw (ParseException)jjte002;
            }
            throw (Error)jjte002;
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002,  2);
            }
          }
/*@egen*/             
)*
}

void Value()       :
{}
{
  String()
| < LPAREN > AddExpr() < RPAREN >
//| String()
}

void String() :
{/*@bgen(jjtree) String */
  ASTString jjtn000 = new ASTString(JJTSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) String */
  try {
/*@egen*/
  < STR_START > 
  t = < STR >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.nodeValue = t.image;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}